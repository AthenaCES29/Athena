#include <stdio.h>
#include <string.h>

typedef struct tabelaDePaginas {
	int id[256];
	int primeira;	/*indice da primeira pagina adicionada na tabela de paginas*/
	int ultima;		/*indice da primeira pagina adicionada na tabela de paginas*/
} tabelaDePaginas;

/*Recebe um ponteiro para a tabela de paginas, um ponteiro para a memoria,
o conteudo da pagina e um id de uma pagina a ser adiconada e adiciona a pagina
a tabela de paginas e seu conteudo a memoria.
A politica de adicao de pagina eh FIFO.*/
void adicionar(tabelaDePaginas* tab, char* memoria, char* pagina,  int id) {
	static int quantidade;
	int i;
	/*Adicionar pagina a tabela*/
	if (tab->ultima == 255)
		tab->ultima = 0;
	else
		tab->ultima++;
	tab->id[tab->ultima] = id;

	/*Adicionar dados a memoria*/
	if (quantidade < 256) {
		quantidade++;
	}
	else {
		if (tab->primeira == 255)
			tab->primeira = 0;
		else
			tab->primeira++;
	}
	for (i = 0; i < 256; i++)
		memoria[tabela->primeira*256 + i] = pagina[i];
}

/*Recebe um ponteiro para a tabela de paginas e um id de pagina.
Retorna o indice se a pagina com id dado estiver presente ou -1 se nao estiver*/
int buscarNaTabela(tabelaDePaginas* tab, int id) {
	int i;
	for (i = 0; i < 256; i++) {
		if (tab->id[i] == id)
			return i;
	}
	return -1;
}

void buscarNoSWAP(unsigned char* pagina, int id) {

}

int main(int argc, char *argv[]) {
	tabelaDePaginas tabela;
	char memoria[256*256];
	char pagina[256];

	FILE* entrada;
	char string[10];
	char** endptr;
	int va, pa, des, id;
	int mascara16 = 65535;

	int i;

/*Ler id's do arquivo adresses.txt*/
	entrada = fopen(argv[1], "r");

	if (entrada == NULL) {
		printf("Erro, nao foi possivel abrir o arquivo.\n");
		return -1;
	}
	else {
		
		while (fgets(string, 10, entrada); != NULL) {
			va = strtol(string, endptr, 10);
			va = id & mascara16;
			id = id / 256;
			des = va % 256;
			pa = tabelaDePaginas.primeira*256 + des;


			if (buscarNaTabela(&tabela, id) == -1) {
				buscarNoSWAP (&pagina, id);
				adicionar(&tabela, &memoria, &pagina, id);
			}
			printf ("Virtual address: %d Physical adress: %d Value: %d\n", va, pa, memoria[pa]);
		}
	}

	fclose(entrada);

	return 0;
}